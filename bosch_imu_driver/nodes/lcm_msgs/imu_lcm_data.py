"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class imu_lcm_data(object):
    __slots__ = ["orientation_quaternion", "orientation_euler", "orientation_covariance", "angular_velocity", "angular_velocity_covariance", "linear_acceleration", "linear_acceleration_covariance", "linear_velocity", "linear_position", "magnetic_field", "magnetic_field_covariance", "temperature", "temperature_variance"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[4], [3], [9], [3], [9], [3], [9], [3], [3], [3], [9], None, None]

    def __init__(self):
        self.orientation_quaternion = [ 0.0 for dim0 in range(4) ]
        self.orientation_euler = [ 0.0 for dim0 in range(3) ]
        self.orientation_covariance = [ 0.0 for dim0 in range(9) ]
        self.angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.angular_velocity_covariance = [ 0.0 for dim0 in range(9) ]
        self.linear_acceleration = [ 0.0 for dim0 in range(3) ]
        self.linear_acceleration_covariance = [ 0.0 for dim0 in range(9) ]
        self.linear_velocity = [ 0.0 for dim0 in range(3) ]
        self.linear_position = [ 0.0 for dim0 in range(3) ]
        self.magnetic_field = [ 0.0 for dim0 in range(3) ]
        self.magnetic_field_covariance = [ 0.0 for dim0 in range(9) ]
        self.temperature = 0.0
        self.temperature_variance = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(imu_lcm_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.orientation_quaternion[:4]))
        buf.write(struct.pack('>3f', *self.orientation_euler[:3]))
        buf.write(struct.pack('>9f', *self.orientation_covariance[:9]))
        buf.write(struct.pack('>3f', *self.angular_velocity[:3]))
        buf.write(struct.pack('>9f', *self.angular_velocity_covariance[:9]))
        buf.write(struct.pack('>3f', *self.linear_acceleration[:3]))
        buf.write(struct.pack('>9f', *self.linear_acceleration_covariance[:9]))
        buf.write(struct.pack('>3f', *self.linear_velocity[:3]))
        buf.write(struct.pack('>3f', *self.linear_position[:3]))
        buf.write(struct.pack('>3f', *self.magnetic_field[:3]))
        buf.write(struct.pack('>9f', *self.magnetic_field_covariance[:9]))
        buf.write(struct.pack(">ff", self.temperature, self.temperature_variance))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_lcm_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_lcm_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imu_lcm_data()
        self.orientation_quaternion = struct.unpack('>4f', buf.read(16))
        self.orientation_euler = struct.unpack('>3f', buf.read(12))
        self.orientation_covariance = struct.unpack('>9f', buf.read(36))
        self.angular_velocity = struct.unpack('>3f', buf.read(12))
        self.angular_velocity_covariance = struct.unpack('>9f', buf.read(36))
        self.linear_acceleration = struct.unpack('>3f', buf.read(12))
        self.linear_acceleration_covariance = struct.unpack('>9f', buf.read(36))
        self.linear_velocity = struct.unpack('>3f', buf.read(12))
        self.linear_position = struct.unpack('>3f', buf.read(12))
        self.magnetic_field = struct.unpack('>3f', buf.read(12))
        self.magnetic_field_covariance = struct.unpack('>9f', buf.read(36))
        self.temperature, self.temperature_variance = struct.unpack(">ff", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imu_lcm_data in parents: return 0
        tmphash = (0x6fe84fb32ed051a0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imu_lcm_data._packed_fingerprint is None:
            imu_lcm_data._packed_fingerprint = struct.pack(">Q", imu_lcm_data._get_hash_recursive([]))
        return imu_lcm_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

